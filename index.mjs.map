{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport fln from '@stdlib/math-base-special-factorialln' ;\nimport max from '@stdlib/math-base-special-max' ;\nimport min from '@stdlib/math-base-special-min' ;\nimport NINF from '@stdlib/constants-float64-ninf' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {number} evaluated logPMF\n*\n* @example\n* var y = logpmf( 1.0, 8, 4, 2 );\n* // returns ~-0.56\n*\n* @example\n* var y = logpmf( 2.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* @example\n* var y = logpmf( 0.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* @example\n* var y = logpmf( 1.5, 8, 4, 2 );\n* // returns -Infinity\n*\n* @example\n* var y = logpmf( NaN, 10, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, NaN, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, 10, NaN, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, 10, 5, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 10.5, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 5, 1.5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 10, 5, -2.0 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 8, 3, 9 );\n* // returns NaN\n*/\nfunction logpmf( x, N, K, n ) {\n\tvar ldenom;\n\tvar lnum;\n\tvar maxs;\n\tvar mins;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\tif (\n\t\tisNonNegativeInteger( x ) &&\n\t\tmins <= x &&\n\t\tx <= maxs\n\t) {\n\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\treturn lnum - ldenom;\n\t}\n\treturn NINF;\n}\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer' ;\nimport constantFunction from '@stdlib/utils-constant-function' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport fln from '@stdlib/math-base-special-factorialln' ;\nimport max from '@stdlib/math-base-special-max' ;\nimport min from '@stdlib/math-base-special-min' ;\nimport NINF from '@stdlib/constants-float64-ninf' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Function} logPMF\n*\n* @example\n* var mylogpmf = factory( 30, 20, 5 );\n* var y = mylogpmf( 4.0 );\n* // returns ~-1.079\n*\n* y = mylogpmf( 1.0 );\n* // returns ~-3.524\n*/\nfunction factory( N, K, n ) {\n\tvar maxs;\n\tvar mins;\n\tif (\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPMF\n\t*/\n\tfunction logpmf( x ) {\n\t\tvar ldenom;\n\t\tvar lnum;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif (\n\t\t\tisNonNegativeInteger( x ) &&\n\t\t\tmins <= x &&\n\t\t\tx <= maxs\n\t\t) {\n\t\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\t\treturn lnum - ldenom;\n\t\t}\n\t\treturn NINF;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability mass function (PMF) for a hypergeometric distribution.\n*\n* @module @stdlib/stats-base-dists-hypergeometric-logpmf\n*\n* @example\n* import logpmf from '@stdlib/stats-base-dists-hypergeometric-logpmf' ;\n*\n* var y = logpmf( 1.0, 8, 4, 2 );\n* // returns ~-0.56\n*\n* y = logpmf( 2.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* y = logpmf( 0.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* y = logpmf( 1.5, 8, 4, 2 );\n* // returns -Infinity\n*\n* var mylogpmf = logpmf.factory( 30, 20, 5 );\n* y = mylogpmf( 4.0 );\n* // returns ~-1.079\n*\n* y = mylogpmf( 1.0 );\n* // returns ~-3.54\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["logpmf","x","N","K","n","ldenom","lnum","maxs","mins","isnan","isNonNegativeInteger","PINF","NaN","max","min","fln","NINF","factory","constantFunction","setReadOnly","main"],"mappings":";;u2BA8FA,SAASA,EAAQC,EAAGC,EAAGC,EAAGC,GACzB,IAAIC,EACAC,EACAC,EACAC,EAEJ,OACCC,EAAOR,IACPQ,EAAOP,IACPO,EAAON,IACPM,EAAOL,KACNM,EAAsBR,KACtBQ,EAAsBP,KACtBO,EAAsBN,IACvBF,IAAMS,GACNR,IAAMQ,GACNR,EAAID,GACJE,EAAIF,EAEGU,KAERJ,EAAOK,EAAK,EAAGT,EAAID,EAAID,GACvBK,EAAOO,EAAKX,EAAGC,GAEdM,EAAsBT,IACtBO,GAAQP,GACRA,GAAKM,GAELD,EAAOS,EAAKX,GAAMW,EAAKZ,GAAMY,EAAKb,EAAIE,GAAMW,EAAKb,EAAIC,GACrDE,EAASU,EAAKb,GAAMa,EAAKd,GAAMc,EAAKX,EAAIH,GAEjCK,GADPD,GAAUU,EAAKZ,EAAIF,GAAMc,EAAKb,EAAIC,EAAIF,EAAIG,KAGpCY,EACR,CC9EA,SAASC,EAASf,EAAGC,EAAGC,GACvB,IAAIG,EACAC,EACJ,OACCC,EAAOP,IACPO,EAAON,IACPM,EAAOL,KACNM,EAAsBR,KACtBQ,EAAsBP,KACtBO,EAAsBN,IACvBF,IAAMS,GACNR,IAAMQ,GACNR,EAAID,GACJE,EAAIF,EAEGgB,EAAkBN,MAG1BJ,EAAOK,EAAK,EAAGT,EAAID,EAAID,GACvBK,EAAOO,EAAKX,EAAGC,GAUf,SAAiBH,GAChB,IAAII,EACAC,EACJ,GAAKG,EAAOR,GACX,OAAOW,IAER,GACCF,EAAsBT,IACtBO,GAAQP,GACRA,GAAKM,EAKL,OAHAD,EAAOS,EAAKX,GAAMW,EAAKZ,GAAMY,EAAKb,EAAIE,GAAMW,EAAKb,EAAIC,GACrDE,EAASU,EAAKb,GAAMa,EAAKd,GAAMc,EAAKX,EAAIH,GACxCI,GAAUU,EAAKZ,EAAIF,GAAMc,EAAKb,EAAIC,EAAIF,EAAIG,GACnCE,EAAOD,EAEf,OAAOW,CACP,EACF,CCxCAG,EAAAC,EAAA,UAAAH"}