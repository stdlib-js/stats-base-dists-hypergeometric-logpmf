{"version":3,"file":"index.mjs","sources":["../lib/logpmf.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math-base-assert-is-nonnegative-integer' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar fln = require( '@stdlib/math-base-special-factorialln' );\nvar max = require( '@stdlib/math-base-special-max' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {number} evaluated logPMF\n*\n* @example\n* var y = logpmf( 1.0, 8, 4, 2 );\n* // returns ~-0.56\n*\n* @example\n* var y = logpmf( 2.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* @example\n* var y = logpmf( 0.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* @example\n* var y = logpmf( 1.5, 8, 4, 2 );\n* // returns -Infinity\n*\n* @example\n* var y = logpmf( NaN, 10, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, NaN, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, 10, NaN, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 0.0, 10, 5, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 10.5, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 5, 1.5, 2 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 10, 5, -2.0 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var y = logpmf( 2.0, 8, 3, 9 );\n* // returns NaN\n*/\nfunction logpmf( x, N, K, n ) {\n\tvar ldenom;\n\tvar lnum;\n\tvar maxs;\n\tvar mins;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\tif (\n\t\tisNonNegativeInteger( x ) &&\n\t\tmins <= x &&\n\t\tx <= maxs\n\t) {\n\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\treturn lnum - ldenom;\n\t}\n\treturn NINF;\n}\n\n\n// EXPORTS //\n\nmodule.exports = logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math-base-assert-is-nonnegative-integer' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar fln = require( '@stdlib/math-base-special-factorialln' );\nvar max = require( '@stdlib/math-base-special-max' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Function} logPMF\n*\n* @example\n* var mylogpmf = factory( 30, 20, 5 );\n* var y = mylogpmf( 4.0 );\n* // returns ~-1.079\n*\n* y = mylogpmf( 1.0 );\n* // returns ~-3.524\n*/\nfunction factory( N, K, n ) {\n\tvar maxs;\n\tvar mins;\n\tif (\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPMF\n\t*/\n\tfunction logpmf( x ) {\n\t\tvar ldenom;\n\t\tvar lnum;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif (\n\t\t\tisNonNegativeInteger( x ) &&\n\t\t\tmins <= x &&\n\t\t\tx <= maxs\n\t\t) {\n\t\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\t\treturn lnum - ldenom;\n\t\t}\n\t\treturn NINF;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability mass function (PMF) for a hypergeometric distribution.\n*\n* @module @stdlib/stats-base-dists-hypergeometric-logpmf\n*\n* @example\n* var logpmf = require( '@stdlib/stats-base-dists-hypergeometric-logpmf' );\n*\n* var y = logpmf( 1.0, 8, 4, 2 );\n* // returns ~-0.56\n*\n* y = logpmf( 2.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* y = logpmf( 0.0, 8, 4, 2 );\n* // returns ~-1.54\n*\n* y = logpmf( 1.5, 8, 4, 2 );\n* // returns -Infinity\n*\n* var mylogpmf = logpmf.factory( 30, 20, 5 );\n* y = mylogpmf( 4.0 );\n* // returns ~-1.079\n*\n* y = mylogpmf( 1.0 );\n* // returns ~-3.54\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar logpmf = require( './logpmf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( logpmf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = logpmf;\n"],"names":["isNonNegativeInteger","require$$0","isnan","require$$1","fln","require$$2","max","require$$3","min","require$$4","NINF","require$$5","PINF","require$$6","constantFunction","require$$7","logpmf","x","N","K","n","ldenom","lnum","maxs","mins","NaN","factory","lib"],"mappings":";;y1BAsBA,IAAIA,EAAuBC,EACvBC,EAAQC,EACRC,EAAMC,EACNC,EAAMC,EACNC,EAAMC,EACNC,EAAOC,EACPC,EAAOC,EAyGX,IC/GIb,EAAuBC,EACvBa,EAAmBX,EACnBD,EAAQG,EACRD,EAAMG,EACND,EAAMG,EACND,EAAMG,EACND,EAAOG,EACPD,EAAOG,EAyEX,ICnDAC,EF2CA,SAAiBC,EAAGC,EAAGC,EAAGC,GACzB,IAAIC,EACAC,EACAC,EACAC,EAEJ,OACCtB,EAAOe,IACPf,EAAOgB,IACPhB,EAAOiB,IACPjB,EAAOkB,KACNpB,EAAsBkB,KACtBlB,EAAsBmB,KACtBnB,EAAsBoB,IACvBF,IAAMN,GACNO,IAAMP,GACNO,EAAID,GACJE,EAAIF,EAEGO,KAERD,EAAOlB,EAAK,EAAGc,EAAID,EAAID,GACvBK,EAAOf,EAAKW,EAAGC,GAEdpB,EAAsBiB,IACtBO,GAAQP,GACRA,GAAKM,GAELD,EAAOlB,EAAKgB,GAAMhB,EAAKe,GAAMf,EAAKc,EAAIE,GAAMhB,EAAKc,EAAIC,GACrDE,EAASjB,EAAKc,GAAMd,EAAKa,GAAMb,EAAKgB,EAAIH,GAEjCK,GADPD,GAAUjB,EAAKe,EAAIF,GAAMb,EAAKc,EAAIC,EAAIF,EAAIG,KAGpCV,IE3ERgB,EDFA,SAAkBR,EAAGC,EAAGC,GACvB,IAAIG,EACAC,EACJ,OACCtB,EAAOgB,IACPhB,EAAOiB,IACPjB,EAAOkB,KACNpB,EAAsBkB,KACtBlB,EAAsBmB,KACtBnB,EAAsBoB,IACvBF,IAAMN,GACNO,IAAMP,GACNO,EAAID,GACJE,EAAIF,EAEGJ,EAAkBW,MAG1BD,EAAOlB,EAAK,EAAGc,EAAID,EAAID,GACvBK,EAAOf,EAAKW,EAAGC,GAUf,SAAiBH,GAChB,IAAII,EACAC,EACJ,GAAKpB,EAAOe,GACX,OAAOQ,IAER,GACCzB,EAAsBiB,IACtBO,GAAQP,GACRA,GAAKM,EAKL,OAHAD,EAAOlB,EAAKgB,GAAMhB,EAAKe,GAAMf,EAAKc,EAAIE,GAAMhB,EAAKc,EAAIC,GACrDE,EAASjB,EAAKc,GAAMd,EAAKa,GAAMb,EAAKgB,EAAIH,GACxCI,GAAUjB,EAAKe,EAAIF,GAAMb,EAAKc,EAAIC,EAAIF,EAAIG,GACnCE,EAAOD,EAEf,OAAOX,KC7CTT,EAOAe,EAAA,UAAAU,GAKA,IAAAC,EAAAX"}